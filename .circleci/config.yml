# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
workflows:
  version: 2
  test:
    jobs:
      - test-3-7
      - test-3-8
      - test-3-9
      - test-3-10
jobs:
  test-3-7: &test-template
    docker:
      - image: cimg/python:3.7.11-node

    #Using medium+ to avoid RAM shortage during integration tests
    resource_class: medium+

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Store python version into a file
          command: |
            python --version > python-version.txt
      # Download and cache dependencies
      - restore_cache:
          keys:
            - requirements-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "python-version.txt" }}-{{ .Branch }}

      - run:
          name: install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      - run:
          name: install dev dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements-dev.txt
      - run:
          name: black
          command: |
            . venv/bin/activate
            black --check src/ unit_tests/ integration_tests/

      - run:
          name: flake8
          command: |
            . venv/bin/activate
            flake8 src/ unit_tests/ integration_tests/
      - run:
          name: pyre
          command: |
            . venv/bin/activate
            pyre check
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            PYTHONPATH=src pytest -x --cov=src/poke_env unit_tests/
      - run:
          name: Converting coverage to xml
          command: |
            . venv/bin/activate
            coverage xml
      - codecov/upload:
          file: coverage.xml

      - run:
          name: Build package
          command: |
            . venv/bin/activate
            python setup.py sdist bdist_wheel
      - run:
          name: Install built package
          command: |
            . venv/bin/activate
            pip install --force-reinstall dist/*.whl
      - run:
          name: Package-based tests
          command: |
            . venv/bin/activate
            pytest -x unit_tests/
      - run:
          name: Download showdown or update it
          command: |
            if [ -d "pokemon-showdown" ]
            then
                cd pokemon-showdown;git pull
            else
                git clone https://github.com/smogon/pokemon-showdown.git
            fi
      - run:
          name: Install showdown dependencies
          command: |
            cd pokemon-showdown
            npm install
            cp config/config-example.js config/config.js
            sed  -i 's/backdoor = true/backdoor = false/g' config/config.js
            sed  -i 's/simulatorprocesses = 1/simulatorprocesses = 2/g' config/config.js
      - run:
          name: Uninstall poke-env before caching
          command: |
            pip uninstall poke-env --yes

      - save_cache:
          paths:
            - ./venv
            - ./pokemon-showdown
          key: requirements-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "python-version.txt" }}-{{ .Branch }}

      - run:
          name: Start showdown server in the background
          command: |
            cd pokemon-showdown;node pokemon-showdown start --no-security --max-old-space-size=3000
          background: true

      - run:
          name: Build docs
          command: |
            . venv/bin/activate
            cd docs
            make html
          background: true

      - run:
          name: Wait for server availability
          command: |
            until $(curl --output /dev/null --silent --head --fail http://localhost:8000); do
              sleep .01
            done
            sleep 1
      - run:
          name: Run integration tests
          command: |
            . venv/bin/activate
            pytest -x integration_tests/
  test-3-8:
    <<: *test-template
    docker:
      - image: cimg/python:3.8.12-node
  test-3-9:
    <<: *test-template
    docker:
      - image: cimg/python:3.9.7-node
  test-3-10:
    <<: *test-template
    docker:
      - image: cimg/python:3.10.6-node
