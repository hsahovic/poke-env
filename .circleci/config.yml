# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
workflows:
  version: 2
  test:
    jobs:
      - test-3-6
      - test-3-7
      - test-3-8
jobs:
  test-3-6: &test-template
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Store python version into a file
          command: |
            python3 --version > python-version.txt

      # Download and cache dependencies
      - restore_cache:
          keys:
            - requirements-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "python-version.txt" }}-v2

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - run:
          name: install dev dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements-dev.txt

      - run:
          name: black
          command: |
            . venv/bin/activate
            black src/ unit_tests/ integration_tests/

      - run:
          name: flake8
          command: |
            . venv/bin/activate
            flake8 src/ unit_tests/ integration_tests/

      - run:
          name: pyre
          command: |
            . venv/bin/activate
            pyre check


      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            PYTHONPATH=src pytest -x --cov=src/poke_env unit_tests/

      - run:
          name: Converting coverage to xml
          command: |
            . venv/bin/activate
            coverage xml

      - codecov/upload:
          file: coverage.xml

      - run:
          name: Build package
          command: |
            . venv/bin/activate
            python setup.py sdist bdist_wheel

      - run:
          name: Install built package
          command: |
            . venv/bin/activate
            pip install dist/*.whl

      - run:
          name: Package-based tests
          command: |
            . venv/bin/activate
            pytest -x unit_tests/

      - run:
          name: Install node
          command: |
            curl -sSL "https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v12.13.0-linux-x64/bin/node
            curl https://www.npmjs.com/install.sh | sudo bash

      - run:
          name: Download showdown or update it
          command: |
            if [ -d "Pokemon-Showdown" ]
            then
                cd Pokemon-Showdown;git pull
            else
                git clone https://github.com/hsahovic/Pokemon-Showdown.git
            fi

      - run:
          name: Install showdown dependencies
          command: |
            npm install Pokemon-Showdown

      - run:
          name: Uninstall poke-env before caching
          command: |
            pip uninstall poke-env

      - save_cache:
          paths:
            - ./venv
            - ./Pokemon-Showdown
          key: requirements-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "python-version.txt" }}-v1

      - run:
          name: Start showdown server in the background
          command: |
            cd Pokemon-Showdown;./pokemon-showdown
          background: true

      - run:
          name: Wait for server availability
          command: |
            until $(curl --output /dev/null --silent --head --fail http://localhost:8000); do
              sleep .01
            done

      - run:
          name: Run integration tests
          command: |
            . venv/bin/activate
            pytest -x integration_tests/

  test-3-7:
    <<: *test-template
    docker:
      - image: circleci/python:3.7
  test-3-8:
    <<: *test-template
    docker:
      - image: circleci/python:3.8


